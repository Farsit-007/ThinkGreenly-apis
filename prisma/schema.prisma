// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(MEMBER)
  isActive  Boolean    @default(true)
  ideas     Idea[]     @relation("UserIdeas")
  votes     Vote[]
  comments  Comment[]
  purchases Purchase[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  ideas     Idea[]
  createdAt DateTime @default(now())
}

model Idea {
  id               String     @id @default(uuid())
  title            String
  problemStatement String
  solution         String
  description      String
  images           String[] // Use array of image URLs
  isPaid           Boolean    @default(false)
  price            Float? // Only needed if isPaid = true
  status           IdeaStatus @default(DRAFT)
  feedback         String? // Rejection reason
  categoryId       String
  authorId         String
  category         Category   @relation(fields: [categoryId], references: [id])
  author           User       @relation("UserIdeas", fields: [authorId], references: [id])
  votes            Vote[]
  comments         Comment[]
  purchases        Purchase[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Vote {
  id     String   @id @default(uuid())
  userId String
  ideaId String
  type   VoteType
  user   User     @relation(fields: [userId], references: [id])
  idea   Idea     @relation(fields: [ideaId], references: [id])

  @@unique([userId, ideaId]) // One vote per user per idea
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  ideaId    String
  userId    String
  parentId  String? // For nested replies
  idea      Idea      @relation(fields: [ideaId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  parent    Comment?  @relation("CommentThread", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentThread")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  ideaId    String
  user      User     @relation(fields: [userId], references: [id])
  idea      Idea     @relation(fields: [ideaId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, ideaId]) // Prevent duplicate purchase
}

enum VoteType {
  UP
  DOWN
}

enum IdeaStatus {
  DRAFT
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum Role {
  MEMBER
  ADMIN
}
